#!/usr/bin/env python3
##
import json
import locale
import sys
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from email.message import EmailMessage
import os.path
import mimetypes
import smtplib
import getpass
import emails
import reports

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales":0}
  sales_of_years = {}

#  print("The initial max_revenue is:\n{}".format(max_revenue))

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
#    print("This is the item in loop:\n{}".format(item))
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
#      print("Current max_revenue is:\n{}".format(max_revenue))


    # Search for the model with the highest sales
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales = item 

    # Store number of sales according to years of the car
    if item["car"]["car_year"] in sales_of_years:
      sales_of_years[item["car"]["car_year"]] += item["total_sales"]
    else:
      sales_of_years[item["car"]["car_year"]] = item["total_sales"]

  # Find the model year with the highest number of sales
  popular_year = max(sales_of_years, key=sales_of_years.get)


  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} generated the most sales: {}".format(
      format_car(max_sales["car"]), max_sales["total_sales"]),
    "The most popular year is {} with {} sales.".format(
      popular_year, sales_of_years[popular_year]),

  ]
  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
#  print(data[1])
  summary = process_data(data)
  print(summary)


  # TODO: turn this into a PDF report


  report_location = "/home/rayyao/Documents/Projects/Certifications/dealership_revenue_report/reports/cars.pdf"
  report = SimpleDocTemplate(report_location)
  styles = getSampleStyleSheet()
  report_title = Paragraph("Sales summary for last month", styles["h1"])

#  table_content = [["ID", "Car", "Price", "Total Sales"]]
#  for car in data:
##    print(car["id"])
##    print(car[0]["id"])

##    table_content.append([car["id"], " ".join(car[car].values()), car["price"]])
#    carinfo = list(car["car"].values())
#    thiscar = ""
#    for info in carinfo:
#      thiscar = thiscar.strip() + " " + str(info)
##    print(thiscar)
#    table_content.append([car["id"], thiscar, car["price"]])
#  print(table_content)

#  table_data = cars_dict_to_table(data)
#  print(table_data)

  table_style = [('GRID', (0,0), (-1,-1), 1, colors.black)]
  report_table = Table(data=cars_dict_to_table(data), style=table_style, hAlign="LEFT")

  report.build([report_title, Paragraph("<br />".join(summary)), report_table])


  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "\n".join(summary)

  message = emails.generate(sender, receiver, subject, body, report_location)
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
